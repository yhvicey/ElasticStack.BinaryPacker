<Project>

    <PropertyGroup>
        <BinaryPackageDownloadUrl Condition=" '$(BinaryPackageDownloadUrl)' == '' ">$(BinaryPackageDownloadUrlTemplate)</BinaryPackageDownloadUrl>
        <BinaryPackageName Condition=" '$(BinaryPackageName)' == '' ">$(BinaryPackageNameTemplate)</BinaryPackageName>
        <NuGetFeedToCheck Condition=" '$(NuGetFeedToCheck)' == '' ">https://api.nuget.org/v3/index.json</NuGetFeedToCheck>
    </PropertyGroup>

    <!-- Resolve binary download url -->
    <PropertyGroup>
        <BinaryPackageDownloadUrl>$(BinaryPackageDownloadUrl.Replace('{BinaryPackageOS}', $(BinaryPackageOS)))</BinaryPackageDownloadUrl>
        <BinaryPackageDownloadUrl>$(BinaryPackageDownloadUrl.Replace('{BinaryPackagePlatform}', $(BinaryPackagePlatform)))</BinaryPackageDownloadUrl>
        <BinaryPackageDownloadUrl>$(BinaryPackageDownloadUrl.Replace('{BinaryPackageVersion}', $(BinaryPackageVersion)))</BinaryPackageDownloadUrl>
        <BinaryPackageDownloadUrl>$(BinaryPackageDownloadUrl.Replace('{BinaryPackageExtension}', $(BinaryPackageExtension)))</BinaryPackageDownloadUrl>
    </PropertyGroup>

    <!-- Resolve package name -->
    <PropertyGroup>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryPackageOS}', $(BinaryPackageOS)))</BinaryPackageName>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryPackagePlatform}', $(BinaryPackagePlatform)))</BinaryPackageName>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryPackageVersion}', $(BinaryPackageVersion)))</BinaryPackageName>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryPackageExtension}', $(BinaryPackageExtension)))</BinaryPackageName>
    </PropertyGroup>

    <!-- NuGet package props -->
    <PropertyGroup>
        <PackageId>$(BinaryPackageName)</PackageId>
        <Version>$(BinaryPackageVersion)</Version>
        <IsTool>True</IsTool>
    </PropertyGroup>
    
    <!-- Custom tasks -->
    <UsingTask 
        TaskName="ElasticStack.BinaryPacker.Tasks.IsPackageVersionExists"
        AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />

    <!-- Targets -->
    <Target Name="Validation"
        BeforeTargets="CheckIfPackagePublished">
        <Message Text="Validating properties..." Importance="High" />
        <Error
            Code="InvalidBinaryPackageDownloadUrl"
            Text="Binary package download url is empty."
            Condition=" '$(BinaryPackageDownloadUrl)' == '' ">
        </Error>
        <Error
            Code="InvalidBinaryPackageName"
            Text="Binary package name is empty."
            Condition=" '$(BinaryPackageName)' == '' ">
        </Error>
        <Error
            Code="InvalidBinaryPackageVersion"
            Text="Binary package version is empty."
            Condition=" '$(BinaryPackageVersion)' == '' ">
        </Error>
        <Message Text="Validation done." Importance="High" />
    </Target>

    <Target Name="CheckIfPackagePublished" BeforeTargets="Build">
        <Message Text="Checking if package is published..." Importance="High" />
        <IsPackageVersionExists
            NuGetFeed="$(NuGetFeedToCheck)"
            PackageId="$(BinaryPackageName)"
            PackageVersion="$(BinaryPackageVersion)">
            <Output
                TaskParameter="Exists"
                PropertyName="PackagePublished">
            </Output>
        </IsPackageVersionExists>
        <!-- Control props -->
        <PropertyGroup>
            <GeneratePackageOnBuild Condition=" '$(PackagePublished)' == 'True' ">False</GeneratePackageOnBuild>
        </PropertyGroup>
    </Target>

</Project>