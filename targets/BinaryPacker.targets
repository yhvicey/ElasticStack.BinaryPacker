<Project>

    <PropertyGroup>
        <BinaryDownloadUrl Condition=" '$(BinaryDownloadUrl)' == '' ">$(BinaryDownloadUrlTemplate)</BinaryDownloadUrl>
        <BinaryPackageName Condition=" '$(BinaryPackageName)' == '' ">$(BinaryPackageNameTemplate)</BinaryPackageName>
        <BinaryPackageVersion Condition=" '$(BinaryPackageVersion)' == '' ">$(BinaryPackageVersionTemplate)</BinaryPackageVersion>
    </PropertyGroup>

    <!-- Resolve binary download url -->
    <PropertyGroup>
        <BinaryDownloadUrl>$(BinaryDownloadUrl.Replace('{BinaryOS}', $(BinaryOS)))</BinaryDownloadUrl>
        <BinaryDownloadUrl>$(BinaryDownloadUrl.Replace('{BinaryPlatform}', $(BinaryPlatform)))</BinaryDownloadUrl>
        <BinaryDownloadUrl>$(BinaryDownloadUrl.Replace('{BinaryVersion}', $(BinaryVersion)))</BinaryDownloadUrl>
    </PropertyGroup>

    <!-- Resolve package name -->
    <PropertyGroup>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryOS}', $(BinaryOS)))</BinaryPackageName>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryPlatform}', $(BinaryPlatform)))</BinaryPackageName>
        <BinaryPackageName>$(BinaryPackageName.Replace('{BinaryVersion}', $(BinaryVersion)))</BinaryPackageName>
    </PropertyGroup>

    <!-- Resolve package version -->
    <PropertyGroup>
        <BinaryPackageVersion>$(BinaryPackageVersion.Replace('{BinaryOS}', $(BinaryOS)))</BinaryPackageVersion>
        <BinaryPackageVersion>$(BinaryPackageVersion.Replace('{BinaryPlatform}', $(BinaryPlatform)))</BinaryPackageVersion>
        <BinaryPackageVersion>$(BinaryPackageVersion.Replace('{BinaryVersion}', $(BinaryVersion)))</BinaryPackageVersion>
    </PropertyGroup>

    <!-- NuGet package props -->
    <PropertyGroup>
        <PackageId>$(BinaryPackageName)</PackageId>
        <Version>$(BinaryPackageVersion)</Version>
        <IsTool>True</IsTool>
    </PropertyGroup>
    
    <!-- Task props & items -->
    <PropertyGroup>
        <LocalFileName>$([System.IO.Path]::GetFileName($(BinaryDownloadUrl)))</LocalFileName>
        <LocalFileNameWithoutExtension>$(LocalFileName.Replace('.zip', '').Replace('.tar', '').Replace('.gz', ''))</LocalFileNameWithoutExtension>
        <NestedPackageFolderName Condition=" '$(NestedPackageFolderName)' == '' ">$(LocalFileNameWithoutExtension)</NestedPackageFolderName>
        <LocalFilePath>$([System.IO.Path]::Combine($(IntermediateOutputPath), $(LocalFileName)))</LocalFilePath>
        <UnpackFolderPath>$([System.IO.Path]::Combine($(IntermediateOutputPath), $(LocalFileNameWithoutExtension)))</UnpackFolderPath>
    </PropertyGroup>
    
    <Choose>
        <When Condition=" $(LocalFileName.EndsWith('.zip')) ">
            <PropertyGroup>
                <UnPackTargetName>UnPackZipFile</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" $(LocalFileName.EndsWith('.tar.gz')) ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarGzFile</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" $(LocalFileName.EndsWith('.tar.bz2')) ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarBz2File</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" $(LocalFileName.EndsWith('.tar')) ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarFile</UnPackTargetName>
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Custom tasks -->
    <UsingTask 
        TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTar"
        AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />
    <UsingTask 
        TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTarGz"
        AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />
    <UsingTask 
        TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTarBz2"
        AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />

    <!-- Targets -->
    <Target Name="Validation" AfterTargets="Build">
        <Message Text="Validating properties..." Importance="High" />
        <Error
            Code="InvalidBinaryDownloadUrl"
            Text="Binary download url is empty."
            Condition=" '$(BinaryDownloadUrl)' == '' ">
        </Error>
        <Message Text="Validation done." Importance="High" />
    </Target>

    <Target Name="DownloadPackage" AfterTargets="Validation">
        <Message Text="Downloading binary package from $(BinaryDownloadUrl)..." Importance="High" />
        <!-- Download to local file -->
        <DownloadFile
            SourceUrl="$(BinaryDownloadUrl)"
            DestinationFolder="$(IntermediateOutputPath)"
            DestinationFileName="$(LocalFileName)"
            Retries="3">
        </DownloadFile>
        <Error
            Code="FailedToDownloadFile"
            Text="Failde to download binary from $(BinaryDownloadUrl)"
            Condition=" !EXISTS('$(LocalFilePath)') ">
        </Error>
        <Message Text="Binary package downloaded to $(LocalFilePath)." Importance="High" />
    </Target>

    <Target Name="UnpackDownloadedPackage" AfterTargets="DownloadPackage">        
        <Message Text="Unpacking binary package $(LocalFilePath)..." Importance="High" />
        <!-- Clear existing folder -->
        <RemoveDir
            Directories="$(LocalFilePath)">
        </RemoveDir>
        <!-- Unpack downloaded archieve file -->
        <CallTarget
            Targets="$(UnPackTargetName)">
        </CallTarget>
        <Message Text="Binary package unpacked to $(UnpackFolderPath)." Importance="High" />
    </Target>

    <Target Name="UnPackZipFile">
        <Unzip
            SourceFiles="$(LocalFilePath)"
            DestinationFolder="$(UnpackFolderPath)">
        </Unzip>
    </Target>

    <Target Name="UnPackTarFile">
        <UnPackTar
            SourceFiles="$(LocalFilePath)"
            DestinationFolder="$(UnpackFolderPath)">
        </UnPackTar>
    </Target>

    <Target Name="UnPackTarBz2File">
        <UnPackTarBz2
            SourceFiles="$(LocalFilePath)"
            DestinationFolder="$(UnpackFolderPath)">
        </UnPackTarBz2>
    </Target>

    <Target Name="UnPackTarGzFile">
        <UnPackTarGz
            SourceFiles="$(LocalFilePath)"
            DestinationFolder="$(UnpackFolderPath)">
        </UnPackTarGz>
    </Target>

    <Target Name="GetFilesToPack" AfterTargets="UnpackDownloadedPackage" Returns="@(FilesToPack)">
        <ItemGroup>
            <FilesToPack Include="$(UnpackFolderPath)/**" Condition=" '$(IsNestedPackage)' != 'True' " />
            <!-- Handle nested zip package -->
            <FilesToPack Include="$([System.IO.Path]::Combine($(UnpackFolderPath), $(NestedPackageFolderName)))/**" Condition=" '$(IsNestedPackage)' == 'True' " />
        </ItemGroup>
    </Target>

    <Target Name="PrepareNuGetPackage" AfterTargets="GetFilesToPack" BeforeTargets="Pack">
        <ItemGroup>
            <Content Include="@(FilesToPack)">
                <Pack>True</Pack>
                <PackagePath>tools\</PackagePath>
            </Content>
        </ItemGroup>
    </Target>

</Project>