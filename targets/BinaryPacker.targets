<Project>

    <!-- Task props & items -->
    <PropertyGroup>
        <LocalFileName>$([System.IO.Path]::GetFileName($(BinaryPackageDownloadUrl)))</LocalFileName>
        <LocalFileNameWithoutExtension>$(LocalFileName.Replace('$(BinaryPackageExtension)', ''))</LocalFileNameWithoutExtension>
        <LocalFilePath>$([System.IO.Path]::Combine($(IntermediateOutputPath), $(LocalFileName)))</LocalFilePath>
        <UnpackFolderPath>$([System.IO.Path]::Combine($(IntermediateOutputPath), $(LocalFileNameWithoutExtension)))</UnpackFolderPath>
    </PropertyGroup>

    <Choose>
        <When Condition=" '$(BinaryPackageExtension)' == '.zip' ">
            <PropertyGroup>
                <UnPackTargetName>UnPackZipFile</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" '$(BinaryPackageExtension)' == '.tar.gz' ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarGzFile</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" '$(BinaryPackageExtension)' == '.tar.bz2' ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarBz2File</UnPackTargetName>
            </PropertyGroup>
        </When>
        <When Condition=" '$(BinaryPackageExtension)' == '.tar' ">
            <PropertyGroup>
                <UnPackTargetName>UnPackTarFile</UnPackTargetName>
            </PropertyGroup>
        </When>
    </Choose>

    <!-- Custom tasks -->
    <UsingTask TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTar" AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />
    <UsingTask TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTarGz" AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />
    <UsingTask TaskName="ElasticStack.BinaryPacker.Tasks.UnPackTarBz2" AssemblyFile="$(TaskAssemblyOutputPath)/ElasticStack.BinaryPacker.Tasks.dll" />

    <!-- Targets -->
    <Target Name="DownloadPackage" AfterTargets="CheckIfPackagePublished" Condition=" '$(GeneratePackageOnBuild)' == 'True' ">
        <Message Text="Downloading binary package from $(BinaryPackageDownloadUrl)..." Importance="High" />
        <!-- Download to local file -->
        <DownloadFile SourceUrl="$(BinaryPackageDownloadUrl)" DestinationFolder="$(IntermediateOutputPath)" DestinationFileName="$(LocalFileName)" Retries="3">
        </DownloadFile>
        <Error Code="FailedToDownloadFile" Text="Failed to download binary from $(BinaryPackageDownloadUrl)" Condition=" !EXISTS('$(LocalFilePath)') ">
        </Error>
        <Message Text="Binary package downloaded to $(LocalFilePath)." Importance="High" />
    </Target>

    <Target Name="UnpackDownloadedPackage" AfterTargets="DownloadPackage" Condition=" '$(GeneratePackageOnBuild)' == 'True' ">
        <Message Text="Unpacking binary package $(LocalFilePath)..." Importance="High" />
        <!-- Clear existing folder -->
        <RemoveDir Directories="$(LocalFilePath)">
        </RemoveDir>
        <!-- Unpack downloaded archive file -->
        <CallTarget Targets="$(UnPackTargetName)">
        </CallTarget>
        <Message Text="Binary package unpacked to $(UnpackFolderPath)." Importance="High" />
    </Target>

    <Target Name="GetFilesToPack" AfterTargets="UnpackDownloadedPackage" Returns="@(FilesToPack)" Condition=" '$(GeneratePackageOnBuild)' == 'True' ">
        <PropertyGroup>
            <UnpackFolderPath>$([System.IO.Path]::Combine($(UnpackFolderPath), $(NestedPackageFolderName)))</UnpackFolderPath>
        </PropertyGroup>
        <Message Text="Collecting files to pack from $(UnpackFolderPath)..." Importance="High" />
        <ItemGroup>
            <FilesToPack Include="$(UnpackFolderPath)/**" />
        </ItemGroup>
        <Message Text="Collected @(FilesToPack->Count()) file(s) to pack from $(UnpackFolderPath)." Importance="High" />
    </Target>

    <Target Name="PrepareNuGetPackage" AfterTargets="GetFilesToPack" BeforeTargets="Pack" Condition=" '$(GeneratePackageOnBuild)' == 'True' ">
        <ItemGroup>
            <Content Include="@(FilesToPack)">
                <Pack>True</Pack>
                <PackagePath>tools\</PackagePath>
            </Content>
        </ItemGroup>
    </Target>

    <Target Name="CleanUpIntermediateFiles" AfterTargets="Pack" Condition=" '$(GeneratePackageOnBuild)' == 'True' ">
        <ItemGroup>
            <FilesToCleanup Include="$(IntermediateOutputPath)/**" />
        </ItemGroup>
        <Message Text="Cleaning up @(FilesToCleanup->Count()) intermediate file(s)..." Importance="High" />
        <!-- Remove unpacked files -->
        <Delete Files="@(FilesToCleanup)" TreatErrorsAsWarnings="True" />
        <Message Text="Intermediate files cleaned up." Importance="High" />
    </Target>

    <!-- Helper targets -->
    <Target Name="UnPackZipFile">
        <Unzip SourceFiles="$(LocalFilePath)" DestinationFolder="$(UnpackFolderPath)">
        </Unzip>
    </Target>

    <Target Name="UnPackTarFile">
        <UnPackTar SourceFiles="$(LocalFilePath)" DestinationFolder="$(UnpackFolderPath)">
        </UnPackTar>
    </Target>

    <Target Name="UnPackTarBz2File">
        <UnPackTarBz2 SourceFiles="$(LocalFilePath)" DestinationFolder="$(UnpackFolderPath)">
        </UnPackTarBz2>
    </Target>

    <Target Name="UnPackTarGzFile">
        <UnPackTarGz SourceFiles="$(LocalFilePath)" DestinationFolder="$(UnpackFolderPath)">
        </UnPackTarGz>
    </Target>

</Project>